/**
 * Minified by jsDelivr using Terser v5.17.1.
 * Original file: /gh/Dddatt/bss@2.0.13/GLSLShaders.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
window.glsl_static_geometry_vsh="#version 300 es\n\n    precision highp float;\n    \n    in vec3 vertPos;\n    in vec4 vertColor;\n    in vec3 vertUV;\n    \n    out float pixFog;\n    out vec4 pixColor;\n    out vec3 pixUV;\n    \n    uniform mat4 viewMatrix;\n    \n    void main(){\n        \n        vec4 pos=viewMatrix*vec4(vertPos,1);\n        pixColor=vertColor;\n        pixUV=vertUV;\n        pixFog=pos.z;\n        gl_Position=pos;\n    }\n",window.glsl_static_geometry_fsh="#version 300 es\n    \n    precision highp float;\n    \n    in float pixFog;\n    in vec4 pixColor;\n    in vec3 pixUV;\n    \n    out vec4 fragColor;\n    \n    uniform sampler2D tex;\n    uniform float isNight;\n    \n    void main(){\n        \n        vec4 t=texture(tex,pixUV.xy);\n        \n        fragColor=vec4(mix(mix(mix(pixColor.rgb,t.rgb,t.a),pixColor.rgb,pixUV.z),vec3(1,1,0.7),smoothstep(20.0,120.0,pixFog)*0.7)*isNight,pixColor.w);\n        \n    }\n",window.glsl_dynamic_geometry_vsh="#version 300 es\n\n    precision highp float;\n    \n    in vec3 vertPos;\n    in vec3 vertColor;\n    in vec3 vertNormal;\n    \n    out vec3 pixColor;\n    out vec3 pixNormal;\n    \n    uniform mat4 viewMatrix;\n    uniform mat4 modelMatrix;\n    \n    void main(){\n        \n        vec4 pos=viewMatrix*modelMatrix*vec4(vertPos,1);\n        pixColor=vertColor;\n        pixNormal=mat3(modelMatrix)*vertNormal;\n        gl_Position=pos;\n    }\n",window.glsl_dynamic_geometry_fsh="#version 300 es\n    \n    precision highp float;\n    \n    in vec3 pixColor;\n    in vec3 pixNormal;\n    \n    out vec4 fragColor;\n    \n    uniform float isNight;\n    \n    void main(){\n        \n        vec3 normal=normalize(pixNormal);\n        float shade=dot(normal,LIGHT_DIR)*0.5+0.55;\n        fragColor=vec4(pixColor*shade*isNight,1.0);\n    }\n",window.glsl_token_geometry_vsh="#version 300 es\n\n    precision highp float;\n    \n    in vec3 vertPos;\n    in vec2 vertUV;\n    \n    in vec4 instance_pos;\n    in vec4 instance_uv;\n    \n    out vec3 pixUV;\n    \n    uniform mat4 viewMatrix;\n    \n    void main(){\n        \n        pixUV=vec3(vertUV,0)+instance_uv.xyz;\n        \n        vec3 vp=vertPos*instance_uv.w;\n        float s=sin(instance_pos.w);\n        float c=cos(instance_pos.w);\n        \n        vp=vec3(vp.x*s-vp.z*c,vp.y,vp.x*c+vp.z*s);\n        \n        gl_Position=viewMatrix*vec4(vp+instance_pos.xyz,1);\n    }\n",window.glsl_token_geometry_fsh="#version 300 es\n    \n    precision highp float;\n    \n    in vec3 pixUV;\n    \n    out vec4 fragColor;\n    \n    uniform sampler2D tex;\n    uniform float isNight;\n    \n    void main(){\n        \n        fragColor=vec4(texture(tex,pixUV.xy).rgb*isNight,pixUV.z);\n    }\n",window.glsl_flower_geometry_vsh="#version 300 es\n\n    precision highp float;\n    \n    in vec3 vertPos;\n    in vec4 vertUV;\n    in float vertGoo;\n    \n    out vec4 pixUV;\n    out float pixFog;\n    out float goo;\n    \n    uniform mat4 viewMatrix;\n    \n    void main(){\n        \n        vec4 pos=viewMatrix*vec4(vertPos,1);\n        pixUV=vertUV;\n        goo=vertGoo;\n        pixFog=smoothstep(20.0,120.0,pos.z)*0.7;\n        gl_Position=pos;\n    }\n",window.glsl_flower_geometry_fsh="#version 300 es\n    \n    precision highp float;\n    \n    in vec4 pixUV;\n    in float pixFog;\n    in float goo;\n    \n    out vec4 fragColor;\n    \n    uniform sampler2D tex;\n    uniform float isNight;\n    \n    void main(){\n        \n        vec3 c=mix(vec3(0,0.6,0),texture(tex,pixUV.xy).rgb*min(pixUV.w,1.0),pixUV.z);\n        \n        c=c.g<=0.1?vec3(0,0.35,0):c;\n\n        fragColor=vec4(mix(goo<0.0?mix(c,vec3(0.1,1,0.5),-goo):mix(c,vec3(1,0.2,1),goo),vec3(1,1,0.7),pixFog)*isNight,1.0);\n    }\n",window.glsl_bee_geometry_vsh="#version 300 es\n\n    precision highp float;\n    \n    in vec3 vertPos;\n    in vec4 vertUV;\n    \n    in vec4 instance_pos;\n    in vec4 instance_rotation;\n    in vec3 instance_uv;\n    \n    out vec3 pixUV;\n    out float pixFog;\n    \n    uniform mat4 viewMatrix;\n\n    vec4 computePos(){\n\n        vec3 vp=vertPos*instance_pos.w;\n\n        vec3 del=normalize(instance_rotation.xyz);\n        \n        float pitch=asin(-del.y)*0.5;\n        float yaw=atan(del.x,del.z)*0.5;\n        float roll=instance_rotation.w*0.5;\n        \n        vec3 s=vec3(sin(pitch),sin(yaw),sin(roll));\n        vec3 c=vec3(cos(pitch),cos(yaw),cos(roll));\n        \n        vec4 quaternion=vec4(s.x*c.y,c.x*s.y,-s.x*s.y,c.x*c.y);\n        \n        quaternion=vec4(quaternion.x*c.z+quaternion.y*s.z,quaternion.y*c.z-quaternion.x*s.z,quaternion.z*c.z+quaternion.w*s.z,(quaternion.w*c.z-quaternion.z*s.z)*2.0);\n        \n        vec3 u=vec3(quaternion.y*vp.z-quaternion.z*vp.y,quaternion.z*vp.x-quaternion.x*vp.z,quaternion.x*vp.y-quaternion.y*vp.x);\n        \n        vec3 uu=vec3(quaternion.y*u.z-quaternion.z*u.y,quaternion.z*u.x-quaternion.x*u.z,quaternion.x*u.y-quaternion.y*u.x);\n        \n        vec4 pos=viewMatrix*vec4(vp+u*quaternion.w+uu*2.0+instance_pos.xyz,1);\n        pixFog=smoothstep(20.0,120.0,pos.z)*0.7;\n\n        return pos;\n    }\n    \n    void main(){\n\n        pixUV=vertUV.xyz+vec3(instance_uv.xy,0);\n\n        gl_Position=instance_uv.z!=vertUV.w&&vertUV.w!=0.0?vec4(9999999,9999999,9999999,1):computePos();\n    }\n",window.glsl_bee_geometry_fsh="#version 300 es\n    \n    precision highp float;\n    \n    in vec3 pixUV;\n    in float pixFog;\n    \n    out vec4 fragColor;\n    \n    uniform sampler2D tex;\n    uniform float isNight;\n    \n    void main(){\n        \n        fragColor=pixUV.z>0.1?vec4(mix(texture(tex,pixUV.xy).rgb*pixUV.z,vec3(1,1,0.7),pixFog)*isNight,1):vec4(mix(vec3(0.1,0.4,1),vec3(1,1,0.7),pixFog)*isNight,0.4);\n    }\n",window.glsl_particle_renderer_vsh="#version 300 es\n    \n    precision highp float;\n    \n    uniform mat4 viewMatrix;\n    \n    in vec3 vertPos;\n    in vec4 vertColor;\n    in float vertSize;\n    in float vertRot;\n    \n    out float particleSize;\n    out vec2 particlePos;\n    out vec4 pixColor;\n    out vec2 particleRot;\n    \n    void main(){\n        \n        vec4 pos=viewMatrix*vec4(vertPos,1);\n        pixColor=vertColor;\n        particlePos=pos.xy/pos.w;\n        gl_Position=pos;\n        float projSize=(vertSize/pos.z)*SCREEN_CHANGE;\n        gl_PointSize=projSize;\n        particleSize=projSize*0.5;\n        particleRot=vec2(sin(vertRot),cos(vertRot));\n        \n    }\n",window.glsl_particle_renderer_fsh="#version 300 es\n    \n    precision highp float;\n    \n    in float particleSize;\n    in vec2 particlePos;\n    in vec4 pixColor;\n    in vec2 particleRot;\n    \n    out vec4 fragColor;\n    \n    void main(){\n        \n        vec2 ssPos=(gl_FragCoord.xy-vec2(HALF_WIDTH,HALF_HEIGHT))*vec2(INV_HALF_WIDTH,INV_HALF_HEIGHT);\n        \n        vec2 del=particlePos-ssPos;\n        \n        del.x*=ASPECT;\n        \n        del=vec2(\n            \n            del.x*particleRot.x-del.y*particleRot.y,\n            del.x*particleRot.y+del.y*particleRot.x\n            \n        );\n        \n        if(abs(del.x)+abs(del.y)>particleSize*INV_AVG_HALF_WIDTH_HEIGHT)\n            discard;\n        \n        fragColor=pixColor;\n    }\n",window.glsl_explosion_renderer_vsh="#version 300 es\n\n    precision highp float;\n    \n    in vec3 vertPos;\n    \n    in vec3 instance_pos;\n    in vec4 instance_color;\n    in vec2 instance_scale;\n    \n    out vec4 pixColor;\n    \n    uniform mat4 viewMatrix;\n    \n    void main(){\n        \n        pixColor=instance_color;\n        gl_Position=viewMatrix*vec4(vertPos*instance_scale.x*vec3(1,instance_scale.y,1)+instance_pos,1);\n    }\n",window.glsl_explosion_renderer_fsh="#version 300 es\n    \n    precision highp float;\n    \n    in vec4 pixColor;\n    \n    out vec4 fragColor;\n    \n    void main(){\n        \n        fragColor=pixColor;\n    }\n",window.glsl_text_renderer_vsh="#version 300 es\n    \n    precision highp float;\n    \n    uniform mat4 viewMatrix;\n    \n    in vec2 vertPos;\n    in vec2 vertUV;\n    \n    in vec3 instance_origin;\n    in vec2 instance_offset;\n    in vec2 instance_uv;\n    in vec3 instance_color;\n    in vec3 instance_info;\n    \n    out vec3 pixColor;\n    out vec2 pixUV;\n    out float fogAmount;\n    \n    void main(){\n        \n        pixUV=vertUV+instance_uv;\n        \n        vec4 originPos=viewMatrix*vec4(instance_origin,1);\n        \n        float s=sin(instance_info.z);\n        float c=cos(instance_info.z);\n        \n        vec2 vp=(vertPos+instance_offset)*instance_info.xy;\n        \n        vp=vec2((vp.x*c-vp.y*s)*INV_ASPECT,vp.x*s+vp.y*c);\n        \n        vec4 pos=originPos+vec4(vp,0,0);\n        \n        gl_Position=pos.w<1.0&&pos.w>0.0?vec4(pos.xyz,1.0):pos;\n\n        pixColor=instance_color;\n        fogAmount=smoothstep(20.0,120.0,originPos.z)*0.7;\n    }\n",window.glsl_text_renderer_fsh="#version 300 es\n    \n    precision highp float;\n    \n    uniform sampler2D tex;\n    \n    in vec2 pixUV;\n    in vec3 pixColor;\n    in float fogAmount;\n    \n    out vec4 fragColor;\n    \n    void main(){\n\n        vec4 c=texture(tex,pixUV);\n\n        vec3 col=mix(c.xyz,vec3(1,1,0.7),fogAmount)*pixColor;\n\n        if(c.a<0.01)\n            discard;\n\n        fragColor=vec4(col,c.a);\n    }\n",window.glsl_mob_renderer_vsh="#version 300 es\n\n    precision highp float;\n    \n    in vec3 vertPos;\n    in vec3 vertColor;\n    \n    out vec4 pixColor;\n    \n    uniform mat4 viewMatrix;\n    uniform vec4 instance_info1;\n    uniform vec2 instance_info2;\n    uniform float isNight;\n    \n    void main(){\n        \n        pixColor=vec4(vertColor*isNight,instance_info2.y);\n        \n        float s=sin(instance_info1.w);\n        float c=cos(instance_info1.w);\n        \n        gl_Position=viewMatrix*vec4(vec3(vertPos.x*c-vertPos.z*s,vertPos.y,vertPos.x*s+vertPos.z*c)*instance_info2.x+instance_info1.xyz,1);\n    }\n",window.glsl_mob_renderer_fsh="#version 300 es\n    \n    precision highp float;\n    \n    in vec4 pixColor;\n    \n    out vec4 fragColor;\n    \n    void main(){\n        \n        fragColor=pixColor;\n    }\n",window.glsl_trail_renderer_vsh="#version 300 es\n\n    precision highp float;\n    \n    in vec3 vertPos;\n    in vec4 vertCol;\n    \n    out vec4 pixColor;\n    \n    uniform mat4 viewMatrix;\n    uniform float isNight;\n    \n    void main(){\n        \n        pixColor=vec4(vertCol.xyz*isNight,vertCol.w);\n        gl_Position=viewMatrix*vec4(vertPos,1);\n    }\n",window.glsl_trail_renderer_fsh="#version 300 es\n    \n    precision highp float;\n    \n    in vec4 pixColor;\n    \n    out vec4 fragColor;\n    \n    void main(){\n        \n        fragColor=pixColor;\n    }\n";
//# sourceMappingURL=/sm/783637ea321ded0cab45d438e4fe76047ebcc3ee8d63372b3a05a2d2fb8728e0.map